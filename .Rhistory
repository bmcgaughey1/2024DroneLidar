polys[i] <- st_concave_hull(las@data[las@data$final_segs == i])
#polys[i] <- concaveman(points)
#plot(st_geometry(points))
#plot(polygons, add = TRUE, col = "cyan", type = "l")
#bp <- st_buffer(points, bufDist, nQuadSegs = 4)
# union buffered points
#clusters <- st_cast(st_union(bp), "POLYGON")
#clusters <-  sf::st_as_sf(clusters)
#clusters$id <- 1:nrow(clusters)
#shrunkClusters <- st_buffer(clusters, -bufDist, nQuadSegs = 4)
#plot(st_geometry(points))
#plot(shrunkClusters, add = TRUE, col = "red", type = "l")
#plot(st_geometry(points), add = T)
#plot(st_geometry(bp), add = T)
}
#pts <- matrix(c(las@data$X[las@data$final_segs == i], las@data$Y[las@data$final_segs == i]), ncol = 2)
#points <- st_as_sf(las@data[las@data$final_segs == i], coords = c("X", "Y"), remove = FALSE, crs = 26910)
polys[i] <- st_concave_hull(las[las@data$final_segs == i])
#pts <- matrix(c(las@data$X[las@data$final_segs == i], las@data$Y[las@data$final_segs == i]), ncol = 2)
#points <- st_as_sf(las@data[las@data$final_segs == i], coords = c("X", "Y"), remove = FALSE, crs = 26910)
polys[i] <- st_concave_hull(las)
#pts <- matrix(c(las@data$X[las@data$final_segs == i], las@data$Y[las@data$final_segs == i]), ncol = 2)
#points <- st_as_sf(las@data[las@data$final_segs == i], coords = c("X", "Y"), remove = FALSE, crs = 26910)
polys[i] <- lidR::st_concave_hull(las)
#pts <- matrix(c(las@data$X[las@data$final_segs == i], las@data$Y[las@data$final_segs == i]), ncol = 2)
#points <- st_as_sf(las@data[las@data$final_segs == i], coords = c("X", "Y"), remove = FALSE, crs = 26910)
polys[i] <- lidR::st_concave_hull(las[las@data$final_segs == i])
polys <- vector("list", treeCount)
for (i in 1:treeCount) {
#pts <- matrix(c(las@data$X[las@data$final_segs == i], las@data$Y[las@data$final_segs == i]), ncol = 2)
#points <- st_as_sf(las@data[las@data$final_segs == i], coords = c("X", "Y"), remove = FALSE, crs = 26910)
polys[i] <- lidR::st_concave_hull(las[las@data$final_segs == i])
#polys[i] <- concaveman(points)
#plot(st_geometry(points))
#plot(polygons, add = TRUE, col = "cyan", type = "l")
#bp <- st_buffer(points, bufDist, nQuadSegs = 4)
# union buffered points
#clusters <- st_cast(st_union(bp), "POLYGON")
#clusters <-  sf::st_as_sf(clusters)
#clusters$id <- 1:nrow(clusters)
#shrunkClusters <- st_buffer(clusters, -bufDist, nQuadSegs = 4)
#plot(st_geometry(points))
#plot(shrunkClusters, add = TRUE, col = "red", type = "l")
#plot(st_geometry(points), add = T)
#plot(st_geometry(bp), add = T)
}
plot(las[las@data$final_segs == i])
#pts <- matrix(c(las@data$X[las@data$final_segs == i], las@data$Y[las@data$final_segs == i]), ncol = 2)
#points <- st_as_sf(las@data[las@data$final_segs == i], coords = c("X", "Y"), remove = FALSE, crs = 26910)
li <- las[las@data$final_segs == i]
polys <- vector("list", treeCount)
for (i in 1:treeCount) {
#pts <- matrix(c(las@data$X[las@data$final_segs == i], las@data$Y[las@data$final_segs == i]), ncol = 2)
#points <- st_as_sf(las@data[las@data$final_segs == i], coords = c("X", "Y"), remove = FALSE, crs = 26910)
li <- las[las@data$final_segs == i]
if (li@header$`Number of point records` >= 3)
polys[i] <- lidR::st_concave_hull(li)
#polys[i] <- concaveman(points)
#plot(st_geometry(points))
#plot(polygons, add = TRUE, col = "cyan", type = "l")
#bp <- st_buffer(points, bufDist, nQuadSegs = 4)
# union buffered points
#clusters <- st_cast(st_union(bp), "POLYGON")
#clusters <-  sf::st_as_sf(clusters)
#clusters$id <- 1:nrow(clusters)
#shrunkClusters <- st_buffer(clusters, -bufDist, nQuadSegs = 4)
#plot(st_geometry(points))
#plot(shrunkClusters, add = TRUE, col = "red", type = "l")
#plot(st_geometry(points), add = T)
#plot(st_geometry(bp), add = T)
}
View(polys)
plot(li)
plot(polys[80])
plot(st_geometry(polys[80]))
plot(polys[[80]])
str(polys[[80]])
str(polys[80])
plot(st_combine(unliat(polys)))
plot(st_combine(unlist(polys)))
str(unlist[polys])
(unlist[polys])
unlist[polys]
unlist[polys[[80]]]
unlist[polys[[1]]]
polys <- vector("list", treeCount)
for (i in 1:treeCount) {
#pts <- matrix(c(las@data$X[las@data$final_segs == i], las@data$Y[las@data$final_segs == i]), ncol = 2)
#points <- st_as_sf(las@data[las@data$final_segs == i], coords = c("X", "Y"), remove = FALSE, crs = 26910)
li <- las[las@data$final_segs == i]
if (li@header$`Number of point records` >= 3)
polys[i] <- st_as_sf(lidR::st_concave_hull(li), coords = c("X", "Y"), remove = FALSE, crs = 26910)
#polys[i] <- concaveman(points)
#plot(st_geometry(points))
#plot(polygons, add = TRUE, col = "cyan", type = "l")
#bp <- st_buffer(points, bufDist, nQuadSegs = 4)
# union buffered points
#clusters <- st_cast(st_union(bp), "POLYGON")
#clusters <-  sf::st_as_sf(clusters)
#clusters$id <- 1:nrow(clusters)
#shrunkClusters <- st_buffer(clusters, -bufDist, nQuadSegs = 4)
#plot(st_geometry(points))
#plot(shrunkClusters, add = TRUE, col = "red", type = "l")
#plot(st_geometry(points), add = T)
#plot(st_geometry(bp), add = T)
}
warnings()
polys <- vector("list", treeCount)
for (i in 1:treeCount) {
#pts <- matrix(c(las@data$X[las@data$final_segs == i], las@data$Y[las@data$final_segs == i]), ncol = 2)
#points <- st_as_sf(las@data[las@data$final_segs == i], coords = c("X", "Y"), remove = FALSE, crs = 26910)
li <- las[las@data$final_segs == i]
if (li@header$`Number of point records` >= 3)
polys[i] <- st_as_sf(lidR::st_concave_hull(li), coords = c("x", "y"), remove = FALSE, crs = 26910)
#polys[i] <- concaveman(points)
#plot(st_geometry(points))
#plot(polygons, add = TRUE, col = "cyan", type = "l")
#bp <- st_buffer(points, bufDist, nQuadSegs = 4)
# union buffered points
#clusters <- st_cast(st_union(bp), "POLYGON")
#clusters <-  sf::st_as_sf(clusters)
#clusters$id <- 1:nrow(clusters)
#shrunkClusters <- st_buffer(clusters, -bufDist, nQuadSegs = 4)
#plot(st_geometry(points))
#plot(shrunkClusters, add = TRUE, col = "red", type = "l")
#plot(st_geometry(points), add = T)
#plot(st_geometry(bp), add = T)
}
lidR::st_concave_hull(li)
str(lidR::st_concave_hull(li))
#polys <- vector("list", treeCount)
for (i in 1:treeCount) {
#pts <- matrix(c(las@data$X[las@data$final_segs == i], las@data$Y[las@data$final_segs == i]), ncol = 2)
#points <- st_as_sf(las@data[las@data$final_segs == i], coords = c("X", "Y"), remove = FALSE, crs = 26910)
li <- las[las@data$final_segs == i]
if (li@header$`Number of point records` >= 3) {
poly <- lidR::st_concave_hull(li)
if (i == 1)
polys <- poly
else
polys <- rbind(polys, poly)
}
#polys[i] <- concaveman(points)
#plot(st_geometry(points))
#plot(polygons, add = TRUE, col = "cyan", type = "l")
#bp <- st_buffer(points, bufDist, nQuadSegs = 4)
# union buffered points
#clusters <- st_cast(st_union(bp), "POLYGON")
#clusters <-  sf::st_as_sf(clusters)
#clusters$id <- 1:nrow(clusters)
#shrunkClusters <- st_buffer(clusters, -bufDist, nQuadSegs = 4)
#plot(st_geometry(points))
#plot(shrunkClusters, add = TRUE, col = "red", type = "l")
#plot(st_geometry(points), add = T)
#plot(st_geometry(bp), add = T)
}
str(polys)
plot(polys)
plot(polys[[6]])
View(polys)
#polys <- vector("list", treeCount)
havePolys <- FALSE
for (i in 1:treeCount) {
#pts <- matrix(c(las@data$X[las@data$final_segs == i], las@data$Y[las@data$final_segs == i]), ncol = 2)
#points <- st_as_sf(las@data[las@data$final_segs == i], coords = c("X", "Y"), remove = FALSE, crs = 26910)
li <- las[las@data$final_segs == i]
if (li@header$`Number of point records` >= 3) {
poly <- lidR::st_concave_hull(li)
poly$ID <- i
if (i == !havePolys) {
polys <- poly
havePolys <- TRUE
}
else
polys <- rbind(polys, poly)
}
#polys[i] <- concaveman(points)
#plot(st_geometry(points))
#plot(polygons, add = TRUE, col = "cyan", type = "l")
#bp <- st_buffer(points, bufDist, nQuadSegs = 4)
# union buffered points
#clusters <- st_cast(st_union(bp), "POLYGON")
#clusters <-  sf::st_as_sf(clusters)
#clusters$id <- 1:nrow(clusters)
#shrunkClusters <- st_buffer(clusters, -bufDist, nQuadSegs = 4)
#plot(st_geometry(points))
#plot(shrunkClusters, add = TRUE, col = "red", type = "l")
#plot(st_geometry(points), add = T)
#plot(st_geometry(bp), add = T)
}
plot(polys[[6]])
plot(polys[[76]])
plot(polys)
plot(st_sfc(polys))
class(polys)
class(polys[[1]])
#polys <- vector("list", treeCount)
havePolys <- FALSE
for (i in 1:treeCount) {
#pts <- matrix(c(las@data$X[las@data$final_segs == i], las@data$Y[las@data$final_segs == i]), ncol = 2)
#points <- st_as_sf(las@data[las@data$final_segs == i], coords = c("X", "Y"), remove = FALSE, crs = 26910)
li <- las[las@data$final_segs == i]
if (li@header$`Number of point records` >= 3) {
poly <- lidR::st_concave_hull(li)
poly$ID <- i
if (!havePolys) {
polys <- poly
havePolys <- TRUE
}
else
polys <- rbind(polys, poly)
}
#polys[i] <- concaveman(points)
#plot(st_geometry(points))
#plot(polygons, add = TRUE, col = "cyan", type = "l")
#bp <- st_buffer(points, bufDist, nQuadSegs = 4)
# union buffered points
#clusters <- st_cast(st_union(bp), "POLYGON")
#clusters <-  sf::st_as_sf(clusters)
#clusters$id <- 1:nrow(clusters)
#shrunkClusters <- st_buffer(clusters, -bufDist, nQuadSegs = 4)
#plot(st_geometry(points))
#plot(shrunkClusters, add = TRUE, col = "red", type = "l")
#plot(st_geometry(points), add = T)
#plot(st_geometry(bp), add = T)
}
#polys <- vector("list", treeCount)
havePolys <- FALSE
for (i in 1:treeCount) {
#pts <- matrix(c(las@data$X[las@data$final_segs == i], las@data$Y[las@data$final_segs == i]), ncol = 2)
#points <- st_as_sf(las@data[las@data$final_segs == i], coords = c("X", "Y"), remove = FALSE, crs = 26910)
li <- las[las@data$final_segs == i]
if (li@header$`Number of point records` >= 3) {
poly <- lidR::st_concave_hull(li)
poly$ID <- i
if (!havePolys) {
polys <- poly
havePolys <- TRUE
}
else
polys <- rbind(polys, poly)
}
#polys[i] <- concaveman(points)
#plot(st_geometry(points))
#plot(polygons, add = TRUE, col = "cyan", type = "l")
#bp <- st_buffer(points, bufDist, nQuadSegs = 4)
# union buffered points
#clusters <- st_cast(st_union(bp), "POLYGON")
#clusters <-  sf::st_as_sf(clusters)
#clusters$id <- 1:nrow(clusters)
#shrunkClusters <- st_buffer(clusters, -bufDist, nQuadSegs = 4)
#plot(st_geometry(points))
#plot(shrunkClusters, add = TRUE, col = "red", type = "l")
#plot(st_geometry(points), add = T)
#plot(st_geometry(bp), add = T)
}
View(polys)
View(polys)
rm(polys)
#polys <- vector("list", treeCount)
havePolys <- FALSE
for (i in 1:treeCount) {
#pts <- matrix(c(las@data$X[las@data$final_segs == i], las@data$Y[las@data$final_segs == i]), ncol = 2)
#points <- st_as_sf(las@data[las@data$final_segs == i], coords = c("X", "Y"), remove = FALSE, crs = 26910)
li <- las[las@data$final_segs == i]
if (li@header$`Number of point records` >= 3) {
poly <- lidR::st_concave_hull(li)
poly$ID <- i
if (!havePolys) {
polys <- poly
havePolys <- TRUE
}
else
polys <- rbind(polys, poly)
}
#polys[i] <- concaveman(points)
#plot(st_geometry(points))
#plot(polygons, add = TRUE, col = "cyan", type = "l")
#bp <- st_buffer(points, bufDist, nQuadSegs = 4)
# union buffered points
#clusters <- st_cast(st_union(bp), "POLYGON")
#clusters <-  sf::st_as_sf(clusters)
#clusters$id <- 1:nrow(clusters)
#shrunkClusters <- st_buffer(clusters, -bufDist, nQuadSegs = 4)
#plot(st_geometry(points))
#plot(shrunkClusters, add = TRUE, col = "red", type = "l")
#plot(st_geometry(points), add = T)
#plot(st_geometry(bp), add = T)
}
#polys <- vector("list", treeCount)
havePolys <- FALSE
for (i in 1:treeCount) {
#pts <- matrix(c(las@data$X[las@data$final_segs == i], las@data$Y[las@data$final_segs == i]), ncol = 2)
#points <- st_as_sf(las@data[las@data$final_segs == i], coords = c("X", "Y"), remove = FALSE, crs = 26910)
li <- las[las@data$final_segs == i]
if (li@header$`Number of point records` >= 3) {
poly <- lidR::st_concave_hull(li)
poly$ID <- i
if (!havePolys) {
polys <- poly
havePolys <- TRUE
}
else
polys <- rbind(polys, poly, make.row.names = FALSE)
}
#polys[i] <- concaveman(points)
#plot(st_geometry(points))
#plot(polygons, add = TRUE, col = "cyan", type = "l")
#bp <- st_buffer(points, bufDist, nQuadSegs = 4)
# union buffered points
#clusters <- st_cast(st_union(bp), "POLYGON")
#clusters <-  sf::st_as_sf(clusters)
#clusters$id <- 1:nrow(clusters)
#shrunkClusters <- st_buffer(clusters, -bufDist, nQuadSegs = 4)
#plot(st_geometry(points))
#plot(shrunkClusters, add = TRUE, col = "red", type = "l")
#plot(st_geometry(points), add = T)
#plot(st_geometry(bp), add = T)
}
View(polys)
#polys <- vector("list", treeCount)
havePolys <- FALSE
for (i in 1:treeCount) {
#pts <- matrix(c(las@data$X[las@data$final_segs == i], las@data$Y[las@data$final_segs == i]), ncol = 2)
#points <- st_as_sf(las@data[las@data$final_segs == i], coords = c("X", "Y"), remove = FALSE, crs = 26910)
li <- las[las@data$final_segs == i]
if (li@header$`Number of point records` >= 3) {
poly <- lidR::st_concave_hull(li)
poly$ID <- i
if (!havePolys) {
polys <- poly
havePolys <- TRUE
}
else
polys <- rbind(polys, poly, deparse.level = 0)
}
#polys[i] <- concaveman(points)
#plot(st_geometry(points))
#plot(polygons, add = TRUE, col = "cyan", type = "l")
#bp <- st_buffer(points, bufDist, nQuadSegs = 4)
# union buffered points
#clusters <- st_cast(st_union(bp), "POLYGON")
#clusters <-  sf::st_as_sf(clusters)
#clusters$id <- 1:nrow(clusters)
#shrunkClusters <- st_buffer(clusters, -bufDist, nQuadSegs = 4)
#plot(st_geometry(points))
#plot(shrunkClusters, add = TRUE, col = "red", type = "l")
#plot(st_geometry(points), add = T)
#plot(st_geometry(bp), add = T)
}
View(polys)
#polys <- vector("list", treeCount)
havePolys <- FALSE
for (i in 1:treeCount) {
#pts <- matrix(c(las@data$X[las@data$final_segs == i], las@data$Y[las@data$final_segs == i]), ncol = 2)
#points <- st_as_sf(las@data[las@data$final_segs == i], coords = c("X", "Y"), remove = FALSE, crs = 26910)
li <- las[las@data$final_segs == i]
if (li@header$`Number of point records` >= 3) {
poly <- lidR::st_concave_hull(li)
#poly$ID <- i
if (!havePolys) {
polys <- poly
havePolys <- TRUE
}
else
polys <- rbind(polys, poly, deparse.level = 0)
}
#polys[i] <- concaveman(points)
#plot(st_geometry(points))
#plot(polygons, add = TRUE, col = "cyan", type = "l")
#bp <- st_buffer(points, bufDist, nQuadSegs = 4)
# union buffered points
#clusters <- st_cast(st_union(bp), "POLYGON")
#clusters <-  sf::st_as_sf(clusters)
#clusters$id <- 1:nrow(clusters)
#shrunkClusters <- st_buffer(clusters, -bufDist, nQuadSegs = 4)
#plot(st_geometry(points))
#plot(shrunkClusters, add = TRUE, col = "red", type = "l")
#plot(st_geometry(points), add = T)
#plot(st_geometry(bp), add = T)
}
str(poly)
str(polys[[1]])
str(polys[1])
class(poly)
class(polys[1])
class(polys[[1]])
#polys <- vector("list", treeCount)
havePolys <- FALSE
for (i in 1:treeCount) {
#pts <- matrix(c(las@data$X[las@data$final_segs == i], las@data$Y[las@data$final_segs == i]), ncol = 2)
#points <- st_as_sf(las@data[las@data$final_segs == i], coords = c("X", "Y"), remove = FALSE, crs = 26910)
li <- las[las@data$final_segs == i]
if (li@header$`Number of point records` >= 3) {
poly <- lidR::st_concave_hull(li)
#poly$ID <- i
if (!havePolys) {
polys <- poly
havePolys <- TRUE
}
else
polys <- sf::rbind(polys, poly, deparse.level = 0)
}
#polys[i] <- concaveman(points)
#plot(st_geometry(points))
#plot(polygons, add = TRUE, col = "cyan", type = "l")
#bp <- st_buffer(points, bufDist, nQuadSegs = 4)
# union buffered points
#clusters <- st_cast(st_union(bp), "POLYGON")
#clusters <-  sf::st_as_sf(clusters)
#clusters$id <- 1:nrow(clusters)
#shrunkClusters <- st_buffer(clusters, -bufDist, nQuadSegs = 4)
#plot(st_geometry(points))
#plot(shrunkClusters, add = TRUE, col = "red", type = "l")
#plot(st_geometry(points), add = T)
#plot(st_geometry(bp), add = T)
}
#polys <- vector("list", treeCount)
havePolys <- FALSE
for (i in 1:treeCount) {
#pts <- matrix(c(las@data$X[las@data$final_segs == i], las@data$Y[las@data$final_segs == i]), ncol = 2)
#points <- st_as_sf(las@data[las@data$final_segs == i], coords = c("X", "Y"), remove = FALSE, crs = 26910)
li <- las[las@data$final_segs == i]
if (li@header$`Number of point records` >= 3) {
poly <- lidR::st_concave_hull(li)
poly$ID <- i
if (!havePolys) {
polys <- poly
havePolys <- TRUE
}
else
polys <- sf::rbind(polys, poly, deparse.level = 0)
}
#polys[i] <- concaveman(points)
#plot(st_geometry(points))
#plot(polygons, add = TRUE, col = "cyan", type = "l")
#bp <- st_buffer(points, bufDist, nQuadSegs = 4)
# union buffered points
#clusters <- st_cast(st_union(bp), "POLYGON")
#clusters <-  sf::st_as_sf(clusters)
#clusters$id <- 1:nrow(clusters)
#shrunkClusters <- st_buffer(clusters, -bufDist, nQuadSegs = 4)
#plot(st_geometry(points))
#plot(shrunkClusters, add = TRUE, col = "red", type = "l")
#plot(st_geometry(points), add = T)
#plot(st_geometry(bp), add = T)
}
#polys <- vector("list", treeCount)
havePolys <- FALSE
for (i in 1:treeCount) {
#pts <- matrix(c(las@data$X[las@data$final_segs == i], las@data$Y[las@data$final_segs == i]), ncol = 2)
#points <- st_as_sf(las@data[las@data$final_segs == i], coords = c("X", "Y"), remove = FALSE, crs = 26910)
li <- las[las@data$final_segs == i]
if (li@header$`Number of point records` >= 3) {
poly <- lidR::st_concave_hull(li)
poly$ID <- i
if (!havePolys) {
polys <- poly
havePolys <- TRUE
}
else
polys <- rbind(polys, poly, deparse.level = 0)
}
#polys[i] <- concaveman(points)
#plot(st_geometry(points))
#plot(polygons, add = TRUE, col = "cyan", type = "l")
#bp <- st_buffer(points, bufDist, nQuadSegs = 4)
# union buffered points
#clusters <- st_cast(st_union(bp), "POLYGON")
#clusters <-  sf::st_as_sf(clusters)
#clusters$id <- 1:nrow(clusters)
#shrunkClusters <- st_buffer(clusters, -bufDist, nQuadSegs = 4)
#plot(st_geometry(points))
#plot(shrunkClusters, add = TRUE, col = "red", type = "l")
#plot(st_geometry(points), add = T)
#plot(st_geometry(bp), add = T)
}
str(poly)
#polys <- vector("list", treeCount)
havePolys <- FALSE
for (i in 1:treeCount) {
#pts <- matrix(c(las@data$X[las@data$final_segs == i], las@data$Y[las@data$final_segs == i]), ncol = 2)
#points <- st_as_sf(las@data[las@data$final_segs == i], coords = c("X", "Y"), remove = FALSE, crs = 26910)
li <- las[las@data$final_segs == i]
if (li@header$`Number of point records` >= 3) {
poly <- lidR::st_concave_hull(li)
#poly$ID <- i
if (!havePolys) {
polys <- poly
havePolys <- TRUE
}
else
polys <- rbind(polys, poly, deparse.level = 0)
}
#polys[i] <- concaveman(points)
#plot(st_geometry(points))
#plot(polygons, add = TRUE, col = "cyan", type = "l")
#bp <- st_buffer(points, bufDist, nQuadSegs = 4)
# union buffered points
#clusters <- st_cast(st_union(bp), "POLYGON")
#clusters <-  sf::st_as_sf(clusters)
#clusters$id <- 1:nrow(clusters)
#shrunkClusters <- st_buffer(clusters, -bufDist, nQuadSegs = 4)
#plot(st_geometry(points))
#plot(shrunkClusters, add = TRUE, col = "red", type = "l")
#plot(st_geometry(points), add = T)
#plot(st_geometry(bp), add = T)
}
str(poly)
poly$ID <- 4
str(poly)
View(poly)
